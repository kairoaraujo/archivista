// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/in-toto/archivista/ent/attestationpolicy"
	"github.com/in-toto/archivista/ent/subjectscope"
)

// SubjectScope is the model entity for the SubjectScope schema.
type SubjectScope struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope string `json:"scope,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubjectScopeQuery when eager-loading is set.
	Edges                             SubjectScopeEdges `json:"edges"`
	attestation_policy_subject_scopes *int
	selectValues                      sql.SelectValues
}

// SubjectScopeEdges holds the relations/edges for other nodes in the graph.
type SubjectScopeEdges struct {
	// AttestationPolicy holds the value of the attestation_policy edge.
	AttestationPolicy *AttestationPolicy `json:"attestation_policy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// AttestationPolicyOrErr returns the AttestationPolicy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubjectScopeEdges) AttestationPolicyOrErr() (*AttestationPolicy, error) {
	if e.loadedTypes[0] {
		if e.AttestationPolicy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: attestationpolicy.Label}
		}
		return e.AttestationPolicy, nil
	}
	return nil, &NotLoadedError{edge: "attestation_policy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubjectScope) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subjectscope.FieldID:
			values[i] = new(sql.NullInt64)
		case subjectscope.FieldSubject, subjectscope.FieldScope:
			values[i] = new(sql.NullString)
		case subjectscope.ForeignKeys[0]: // attestation_policy_subject_scopes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubjectScope fields.
func (ss *SubjectScope) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subjectscope.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ss.ID = int(value.Int64)
		case subjectscope.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				ss.Subject = value.String
			}
		case subjectscope.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				ss.Scope = value.String
			}
		case subjectscope.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field attestation_policy_subject_scopes", value)
			} else if value.Valid {
				ss.attestation_policy_subject_scopes = new(int)
				*ss.attestation_policy_subject_scopes = int(value.Int64)
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubjectScope.
// This includes values selected through modifiers, order, etc.
func (ss *SubjectScope) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QueryAttestationPolicy queries the "attestation_policy" edge of the SubjectScope entity.
func (ss *SubjectScope) QueryAttestationPolicy() *AttestationPolicyQuery {
	return NewSubjectScopeClient(ss.config).QueryAttestationPolicy(ss)
}

// Update returns a builder for updating this SubjectScope.
// Note that you need to call SubjectScope.Unwrap() before calling this method if this SubjectScope
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SubjectScope) Update() *SubjectScopeUpdateOne {
	return NewSubjectScopeClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SubjectScope entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SubjectScope) Unwrap() *SubjectScope {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubjectScope is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SubjectScope) String() string {
	var builder strings.Builder
	builder.WriteString("SubjectScope(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("subject=")
	builder.WriteString(ss.Subject)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(ss.Scope)
	builder.WriteByte(')')
	return builder.String()
}

// SubjectScopes is a parsable slice of SubjectScope.
type SubjectScopes []*SubjectScope
