// Code generated by ent, DO NOT EDIT.

package subjectscope

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subjectscope type in the database.
	Label = "subject_scope"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// EdgeAttestationPolicy holds the string denoting the attestation_policy edge name in mutations.
	EdgeAttestationPolicy = "attestation_policy"
	// Table holds the table name of the subjectscope in the database.
	Table = "subject_scopes"
	// AttestationPolicyTable is the table that holds the attestation_policy relation/edge.
	AttestationPolicyTable = "subject_scopes"
	// AttestationPolicyInverseTable is the table name for the AttestationPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "attestationpolicy" package.
	AttestationPolicyInverseTable = "attestation_policies"
	// AttestationPolicyColumn is the table column denoting the attestation_policy relation/edge.
	AttestationPolicyColumn = "attestation_policy_subject_scopes"
)

// Columns holds all SQL columns for subjectscope fields.
var Columns = []string{
	FieldID,
	FieldSubject,
	FieldScope,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subject_scopes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"attestation_policy_subject_scopes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	SubjectValidator func(string) error
	// ScopeValidator is a validator for the "scope" field. It is called by the builders before save.
	ScopeValidator func(string) error
)

// OrderOption defines the ordering options for the SubjectScope queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByScope orders the results by the scope field.
func ByScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScope, opts...).ToFunc()
}

// ByAttestationPolicyField orders the results by attestation_policy field.
func ByAttestationPolicyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttestationPolicyStep(), sql.OrderByField(field, opts...))
	}
}
func newAttestationPolicyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttestationPolicyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AttestationPolicyTable, AttestationPolicyColumn),
	)
}
