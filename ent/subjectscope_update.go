// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/in-toto/archivista/ent/attestationpolicy"
	"github.com/in-toto/archivista/ent/predicate"
	"github.com/in-toto/archivista/ent/subjectscope"
)

// SubjectScopeUpdate is the builder for updating SubjectScope entities.
type SubjectScopeUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectScopeMutation
}

// Where appends a list predicates to the SubjectScopeUpdate builder.
func (ssu *SubjectScopeUpdate) Where(ps ...predicate.SubjectScope) *SubjectScopeUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetSubject sets the "subject" field.
func (ssu *SubjectScopeUpdate) SetSubject(s string) *SubjectScopeUpdate {
	ssu.mutation.SetSubject(s)
	return ssu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (ssu *SubjectScopeUpdate) SetNillableSubject(s *string) *SubjectScopeUpdate {
	if s != nil {
		ssu.SetSubject(*s)
	}
	return ssu
}

// SetScope sets the "scope" field.
func (ssu *SubjectScopeUpdate) SetScope(s string) *SubjectScopeUpdate {
	ssu.mutation.SetScope(s)
	return ssu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (ssu *SubjectScopeUpdate) SetNillableScope(s *string) *SubjectScopeUpdate {
	if s != nil {
		ssu.SetScope(*s)
	}
	return ssu
}

// SetAttestationPolicyID sets the "attestation_policy" edge to the AttestationPolicy entity by ID.
func (ssu *SubjectScopeUpdate) SetAttestationPolicyID(id int) *SubjectScopeUpdate {
	ssu.mutation.SetAttestationPolicyID(id)
	return ssu
}

// SetNillableAttestationPolicyID sets the "attestation_policy" edge to the AttestationPolicy entity by ID if the given value is not nil.
func (ssu *SubjectScopeUpdate) SetNillableAttestationPolicyID(id *int) *SubjectScopeUpdate {
	if id != nil {
		ssu = ssu.SetAttestationPolicyID(*id)
	}
	return ssu
}

// SetAttestationPolicy sets the "attestation_policy" edge to the AttestationPolicy entity.
func (ssu *SubjectScopeUpdate) SetAttestationPolicy(a *AttestationPolicy) *SubjectScopeUpdate {
	return ssu.SetAttestationPolicyID(a.ID)
}

// Mutation returns the SubjectScopeMutation object of the builder.
func (ssu *SubjectScopeUpdate) Mutation() *SubjectScopeMutation {
	return ssu.mutation
}

// ClearAttestationPolicy clears the "attestation_policy" edge to the AttestationPolicy entity.
func (ssu *SubjectScopeUpdate) ClearAttestationPolicy() *SubjectScopeUpdate {
	ssu.mutation.ClearAttestationPolicy()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SubjectScopeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SubjectScopeUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SubjectScopeUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SubjectScopeUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SubjectScopeUpdate) check() error {
	if v, ok := ssu.mutation.Subject(); ok {
		if err := subjectscope.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "SubjectScope.subject": %w`, err)}
		}
	}
	if v, ok := ssu.mutation.Scope(); ok {
		if err := subjectscope.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "SubjectScope.scope": %w`, err)}
		}
	}
	return nil
}

func (ssu *SubjectScopeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subjectscope.Table, subjectscope.Columns, sqlgraph.NewFieldSpec(subjectscope.FieldID, field.TypeInt))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.Subject(); ok {
		_spec.SetField(subjectscope.FieldSubject, field.TypeString, value)
	}
	if value, ok := ssu.mutation.Scope(); ok {
		_spec.SetField(subjectscope.FieldScope, field.TypeString, value)
	}
	if ssu.mutation.AttestationPolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectscope.AttestationPolicyTable,
			Columns: []string{subjectscope.AttestationPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestationpolicy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.AttestationPolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectscope.AttestationPolicyTable,
			Columns: []string{subjectscope.AttestationPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestationpolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectscope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SubjectScopeUpdateOne is the builder for updating a single SubjectScope entity.
type SubjectScopeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectScopeMutation
}

// SetSubject sets the "subject" field.
func (ssuo *SubjectScopeUpdateOne) SetSubject(s string) *SubjectScopeUpdateOne {
	ssuo.mutation.SetSubject(s)
	return ssuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (ssuo *SubjectScopeUpdateOne) SetNillableSubject(s *string) *SubjectScopeUpdateOne {
	if s != nil {
		ssuo.SetSubject(*s)
	}
	return ssuo
}

// SetScope sets the "scope" field.
func (ssuo *SubjectScopeUpdateOne) SetScope(s string) *SubjectScopeUpdateOne {
	ssuo.mutation.SetScope(s)
	return ssuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (ssuo *SubjectScopeUpdateOne) SetNillableScope(s *string) *SubjectScopeUpdateOne {
	if s != nil {
		ssuo.SetScope(*s)
	}
	return ssuo
}

// SetAttestationPolicyID sets the "attestation_policy" edge to the AttestationPolicy entity by ID.
func (ssuo *SubjectScopeUpdateOne) SetAttestationPolicyID(id int) *SubjectScopeUpdateOne {
	ssuo.mutation.SetAttestationPolicyID(id)
	return ssuo
}

// SetNillableAttestationPolicyID sets the "attestation_policy" edge to the AttestationPolicy entity by ID if the given value is not nil.
func (ssuo *SubjectScopeUpdateOne) SetNillableAttestationPolicyID(id *int) *SubjectScopeUpdateOne {
	if id != nil {
		ssuo = ssuo.SetAttestationPolicyID(*id)
	}
	return ssuo
}

// SetAttestationPolicy sets the "attestation_policy" edge to the AttestationPolicy entity.
func (ssuo *SubjectScopeUpdateOne) SetAttestationPolicy(a *AttestationPolicy) *SubjectScopeUpdateOne {
	return ssuo.SetAttestationPolicyID(a.ID)
}

// Mutation returns the SubjectScopeMutation object of the builder.
func (ssuo *SubjectScopeUpdateOne) Mutation() *SubjectScopeMutation {
	return ssuo.mutation
}

// ClearAttestationPolicy clears the "attestation_policy" edge to the AttestationPolicy entity.
func (ssuo *SubjectScopeUpdateOne) ClearAttestationPolicy() *SubjectScopeUpdateOne {
	ssuo.mutation.ClearAttestationPolicy()
	return ssuo
}

// Where appends a list predicates to the SubjectScopeUpdate builder.
func (ssuo *SubjectScopeUpdateOne) Where(ps ...predicate.SubjectScope) *SubjectScopeUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SubjectScopeUpdateOne) Select(field string, fields ...string) *SubjectScopeUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SubjectScope entity.
func (ssuo *SubjectScopeUpdateOne) Save(ctx context.Context) (*SubjectScope, error) {
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SubjectScopeUpdateOne) SaveX(ctx context.Context) *SubjectScope {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SubjectScopeUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SubjectScopeUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SubjectScopeUpdateOne) check() error {
	if v, ok := ssuo.mutation.Subject(); ok {
		if err := subjectscope.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "SubjectScope.subject": %w`, err)}
		}
	}
	if v, ok := ssuo.mutation.Scope(); ok {
		if err := subjectscope.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf(`ent: validator failed for field "SubjectScope.scope": %w`, err)}
		}
	}
	return nil
}

func (ssuo *SubjectScopeUpdateOne) sqlSave(ctx context.Context) (_node *SubjectScope, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subjectscope.Table, subjectscope.Columns, sqlgraph.NewFieldSpec(subjectscope.FieldID, field.TypeInt))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubjectScope.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subjectscope.FieldID)
		for _, f := range fields {
			if !subjectscope.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subjectscope.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.Subject(); ok {
		_spec.SetField(subjectscope.FieldSubject, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.Scope(); ok {
		_spec.SetField(subjectscope.FieldScope, field.TypeString, value)
	}
	if ssuo.mutation.AttestationPolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectscope.AttestationPolicyTable,
			Columns: []string{subjectscope.AttestationPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestationpolicy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.AttestationPolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectscope.AttestationPolicyTable,
			Columns: []string{subjectscope.AttestationPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestationpolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubjectScope{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectscope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
