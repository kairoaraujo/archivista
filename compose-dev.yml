# Copyright 2023 The Archivista Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3.9'

services:
  db:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=secret
    volumes:
      - "psqldata:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 1s

  redis:
    image: redis:4.0
    volumes:
      - redisdata:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: "exit 0"
    restart: always
    tty: true

  archivista:
    build:
      context: .
      dockerfile: ./Dockerfile-dev
    restart: unless-stopped
    environment:
      ARCHIVISTA_LISTEN_ON: tcp://0.0.0.0:8082
      ARCHIVISTA_ENABLE_SPIFFE: "false"
      ARCHIVISTA_STORAGE_BACKEND: BLOB
      ARCHIVISTA_FILE_DIR: /tmp/archivista/
      ARCHIVISTA_FILE_SERVE_ON: :8081
      ARCHIVISTA_BLOB_STORE_USE_TLS: "false"
      ARCHIVISTA_BLOB_STORE_CREDENTIAL_TYPE: ACCESS_KEY
      ARCHIVISTA_BLOB_STORE_ACCESS_KEY_ID: testifytestifytestify
      ARCHIVISTA_BLOB_STORE_SECRET_ACCESS_KEY_ID: exampleexampleexample
      ARCHIVISTA_BLOB_STORE_BUCKET_NAME: attestations
      ARCHIVISTA_BLOB_STORE_ENDPOINT: minio:9000
      ARCHIVISTA_ENABLE_GRAPHQL: "true"
      ARCHIVISTA_GRAPHQL_WEB_CLIENT_ENABLE: "true"
      ARCHIVISTA_CORS_ALLOW_ORIGINS: "http://localhost:1234"
      ARCHIVISTA_TUF_ENDPOINT: "http://localhost"
      ARCHIVISTA_SQL_STORE_BACKEND: PSQL
      ARCHIVISTA_SQL_STORE_CONNECTION_STRING: postgresql://postgres:secret@db?sslmode=disable

    ports:
      - 8081:8081
      - 8082:8082
    volumes:
      - fileserver:/tmp/archivista
      - ./:/src
      - ./../go-witness:/Users/kairo/dev/in-toto/go-witness

  minio:
    image: quay.io/minio/minio
    restart: always
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: testifytestifytestify
      MINIO_ROOT_PASSWORD: exampleexampleexample
    volumes:
      - miniodata:/data

  minio-init:
    image: quay.io/minio/mc
    restart: on-failure
    command: mb --insecure --ignore-existing testminio/attestations testminio/policies
    environment:
      MC_HOST_testminio: http://testifytestifytestify:exampleexampleexample@minio:9000

  web-tuf:
    image: python:3.11-slim-buster
    command: python -m http.server -d /var/opt/repository-service-tuf/storage 8080
    volumes:
      - rstuf-metadata:/var/opt/repository-service-tuf/storage
      - ./dev/rstuf/configs:/rstuf
    ports:
      - "8080:8080"

  rstuf-api:
    image: ghcr.io/repository-service-tuf/repository-service-tuf-api:v0.11.1b1
    ports:
      - 8001:80
    environment:
      - RSTUF_BROKER_SERVER=redis://redis/1
      - RSTUF_REDIS_SERVER=redis://redis

  rstuf-worker:
    image: ghcr.io/repository-service-tuf/repository-service-tuf-worker:v0.13.0b1
    volumes:
      - rstuf-metadata:/var/opt/repository-service-tuf/storage
      - ./dev/rstuf/keys/online:/keyvault
    environment:
      - RSTUF_ONLINE_KEY_DIR=/keyvault
      - RSTUF_STORAGE_BACKEND=LocalStorage
      - RSTUF_LOCAL_STORAGE_BACKEND_PATH=/var/opt/repository-service-tuf/storage
      # RSTUF supports the same S3 buckets as Archivista, but for transparency we are using a simple storage for TUF Metadata
      # - RSTUF_STORAGE_BACKEND=AWSS3
      # - RSTUF_AWSS3_STORAGE_BUCKET=tuf
      # - RSTUF_AWSS3_STORAGE_ACCESS_KEY=testifytestifytestify
      # - RSTUF_AWSS3_STORAGE_SECRET_KEY=exampleexampleexample
      # - RSTUF_AWSS3_STORAGE_ENDPOINT_URL=http://minio:9000
      - RSTUF_BROKER_SERVER=redis://redis/1
      - RSTUF_REDIS_SERVER=redis://redis
      - RSTUF_SQL_SERVER=postgresql://postgres:secret@db:5432
    depends_on:
      db:
        condition: service_healthy

volumes:
  fileserver:
  miniodata:
  psqldata:
  rstuf-metadata:
  redisdata: